import pygame
import sys
import math
import random
import ctypes
import os
import subprocess

subprocess.call("make_folder", shell=True)
subprocess.call("setting", shell=True)
subprocess.call("images_download", shell=True)
pygame.init()

u32 = ctypes.windll.user32
resolution = u32.GetSystemMetrics(0), u32.GetSystemMetrics(1)
display = pygame.display.set_mode((u32.GetSystemMetrics(0), u32.GetSystemMetrics(1)))
clock = pygame.time.Clock()

player_walk_images = [pygame.image.load(os.path.join(image_path, "player_motion1.png")),
                      pygame.image.load(os.path.join(image_path, "player_motion2.png")),
                      pygame.image.load(os.path.join(image_path, "player_motion3.png")),
                      pygame.image.load(os.path.join(image_path, "player_motion4.png"))]

player_weapon = pygame.image.load("magic_sword.png").convert()
player_weapon.set_colorkey((255, 255, 255))

class Player:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.animation_count = 0
        self.moving_left = False
        self.moving_right = False
        
    def handle_weapons(self, display):
        mouse_x, mouse_y = pygame.mouse.get_pos()
        
        rel_x, rel_y = mouse_x - player.x, mouse_y - player.y
        if player.moving_left:
            angle = 180
        elif player.moving_right:
            angle = 0
            
        player_weapon_copy = pygame.transform.rotate(player_weapon, angle)
        
        display.blit(player_weapon_copy, (self.x + 15 - int(player_weapon_copy.get_width() / 2),
                                          self.y + 25 - int(player_weapon_copy.get_height() / 2)))

    def main(self, display):
        if self.animation_count + 1 >= 16:
            self.animation_count = 0
            
        self.animation_count += 1
        
        if self.moving_right:
            display.blit(pygame.transform.scale(player_walk_images[self.animation_count//4], (32, 42)), (self.x, self.y))
        elif self.moving_left:
            display.blit(pygame.transform.scale(pygame.transform.flip(player_walk_images[self.animation_count//4], True, False), (32, 42)), (self.x, self.y))
        else:
            display.blit(pygame.transform.scale(player_walk_images[0], (32, 42)), (self.x, self.y))

        self.handle_weapons(display)

        self.moving_left = False
        self.moving_right = False
        
class weapon_effect:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.animation_images = [pygame.image.load("effect1.png"), pygame.image.load("effect2.png"),
                                 pygame.image.load("effect3.jpg"), pygame.image.load("effect4.jpg")]
        self.animation_count = 0
        if player.moving_left:
            self.angle = 180
        elif player.moving_right:
            self.angle = 0
    def main(self, display):
        if self.animation_count + 1 == 16:
            self.animation_count = 0
        self.animation_count += 1
            
    pygame.draw.rect(display, ) #여기까지 작업(2023. 7. 29)

class OrbitalEnemy:
    def __init__(self, x, y):
        self.x =x
        self.y =y
        self.animation_images = [pygame.image.load("모션1.png"), pygame.image.load("모션2.png"),
                                 pygame.image.load("모션3.jpg"), pygame.image.load("모션4.jpg")]
        self.animation_count = 0
        self.reset_offset = 0
        self.offset_x = random.randrange(-150, 150)
        self.offset_y = random.randrange(-150, 150)
    def main(self, display):
        if self.animation_count + 1 == 16:
            self.animation_count = 0
        self.animation_count += 1
        
        if self.reset_offset == 0:
            self.offset_x = random.randrange(-150, 150)
            self.offset_y = random.randrange(-150, 150)
            self.reset_offset = random.randrange(120, 150)
        else:
            self.reset_offset -= 1
            
        if player.x + self.offset_x > self.x - display_scroll[0]:
            self.x += 1
        elif player.x + self.offset_x < self.x - display_scroll[0]:
            self.x -= 1
            
        if player.y + self.offset_y > self.y - display_scroll[1]:
            self.y += 1
        elif player.y + self.offset_y < self.y - display_scroll[1]:
            self.y -= 1
            
        display.blit(pygame.transform.scale(self.animation_images[self.animation_count//4], (32, 30)), (self.x - display_scroll[0], self.y - display_scroll[1]))

enemies = [OrbitalEnemy(400, 300)]

player = Player(u32.GetSystemMetrics(0) / 2, u32.GetSystemMetrics(1) / 2, 32, 32)

display_scroll = [0, 0]

while True:
    display.fill((0, 0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
            pygame.QUIT
            
    keys = pygame.key.get_pressed()
    
    pygame.draw.rect(display, (255, 255, 255), ((u32.GetSystemMetrics(0) / 2) - display_scroll[0] + 8, (u32.GetSystemMetrics(1) / 2) - display_scroll[1] + 8, 16, 16))
    
    if keys[pygame.K_a]:
        display_scroll[0] -= 5
        
        player.moving_left = True
    if keys[pygame.K_d]:
        display_scroll[0] += 5
        
        player.moving_right = True
    if keys[pygame.K_w]:
        display_scroll[1] -= 5
    if keys[pygame.K_s]:
        display_scroll[1] += 5
            
    player.main(display)
    
    for enemy in enemies:
        enemy.main(display)

    clock.tick(60)
    pygame.display.update()
